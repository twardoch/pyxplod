# When you write code

- Iterate gradually, avoiding major changes
- Minimize confirmations and checks
- Preserve existing code/structure unless necessary
- Use constants over magic numbers
- Check for existing solutions in the codebase before starting
- Check often the coherence of the code you’re writing with the rest of the code.
- Focus on minimal viable increments and ship early
- Write explanatory docstrings/comments that explain what and WHY this does, explain where and how the code is used/referred to elsewhere in the code
- Analyze code line-by-line
- Handle failures gracefully with retries, fallbacks, user guidance
- Address edge cases, validate assumptions, catch errors early
- Let the computer do the work, minimize user decisions
- Reduce cognitive load, beautify code
- Modularize repeated logic into concise, single-purpose functions
- Favor flat over nested structures
- Consistently keep, document, update and consult the holistic overview mental image of the codebase. 

## Keep track of paths

In each source file, maintain the up-to-date `this_file` record that shows the path of the current file relative to project root. Place the `this_file` record near the top of the file, as a comment after the shebangs, or in the YAML Markdown frontmatter.

## When you write Python

- Use `uv pip`, never `pip`
- Use `python -m` when running code
- PEP 8: Use consistent formatting and naming
- Write clear, descriptive names for functions and variables
- PEP 20: Keep code simple and explicit. Prioritize readability over cleverness
- Use type hints in their simplest form (list, dict, | for unions)
- PEP 257: Write clear, imperative docstrings
- Use f-strings. Use structural pattern matching where appropriate
- ALWAYS add "verbose" mode logugu-based logging, & debug-log
- For CLI Python scripts, use fire & rich, and start the script with

```
#!/usr/bin/env -S uv run -s
# /// script
# dependencies = ["PKG1", "PKG2"]
# ///
# this_file: PATH_TO_CURRENT_FILE
```

Work in rounds: 

- Create `PLAN.md` as a detailed flat plan with `[ ]` items. 
- Identify the most important TODO items, and create `TODO.md` with `[ ]` items. 
- Implement the changes. 
- Update `PLAN.md` and `TODO.md` as you go. 
- After each round of changes, update `CHANGELOG.md` with the changes.
- Update `README.md` to reflect the changes.

Ask before extending/refactoring existing code in a way that may add complexity or break things.

When you’re finished, print "Wait, but" to go back, think & reflect, revise & improvement what you’ve done (but don’t invent functionality freely). Repeat this. But stick to the goal of "minimal viable next version". Lead two experts: "Ideot" for creative, unorthodox ideas, and "Critin" to critique flawed thinking and moderate for balanced discussions. The three of you shall illuminate knowledge with concise, beautiful responses, process methodically for clear answers, collaborate step-by-step, sharing thoughts and adapting. If errors are found, step back and focus on accuracy and progress.

## After Python changes run:

```
fd -e py -x autoflake {}; fd -e py -x pyupgrade --py311-plus {}; fd -e py -x ruff check --output-format=github --fix --unsafe-fixes {}; fd -e py -x ruff format --respect-gitignore --target-version py311 {}; python -m pytest;
```

Be creative, diligent, critical, relentless & funny!
START SPECIFICATION:
---
description: Create overview documentation when analyzing unique business logic in video processing tools, particularly those focused on intelligent video overlay and synchronization with advanced frame alignment capabilities
globs: *.py,*.md
alwaysApply: false
---


# main-overview

## Development Guidelines

- Only modify code directly relevant to the specific request. Avoid changing unrelated functionality.
- Never replace code with placeholders like `# ... rest of the processing ...`. Always include complete code.
- Break problems into smaller steps. Think through each step separately before implementing.
- Always provide a complete PLAN with REASONING based on evidence from code and logs before making changes.
- Explain your OBSERVATIONS clearly, then provide REASONING to identify the exact issue. Add console logs when needed to gather more information.


## Core Business Components

### Frame Alignment Engine (Importance: 95)
Handles the critical synchronization between foreground and background videos using:

1. **Perceptual Frame Fingerprinting**
- Creates unique fingerprints for video frames using multiple hash algorithms
- Combines pHash, AverageHash, ColorMomentHash and MarrHildrethHash 
- Enables ultra-fast frame comparison without pixel-level analysis

2. **Spatial Alignment System**
- Determines optimal x/y positioning of foreground video
- Uses template matching with normalized cross-correlation
- Handles automatic scaling when source sizes differ

3. **Temporal Synchronization**  
- Implements Dynamic Time Warping for frame-perfect alignment
- Creates monotonic mapping between foreground and background frames
- Prevents temporal drift through adaptive keyframe density

### Video Composition Pipeline (Importance: 90)

1. **Video Analysis Phase**
- Extracts metadata from both video sources
- Determines frame rates, durations, resolutions
- Identifies available audio streams

2. **Frame Matching Algorithm**  
- Maps every foreground frame to optimal background frame
- Maintains foreground timing integrity
- Dynamically adapts background video timing

3. **Audio Integration System**
- Prioritizes foreground audio when available
- Ensures synchronized audio/video alignment
- Handles fallback to background audio

### Operation Modes (Importance: 85)

1. **Border Matching Mode**
- Aligns content based on visible background edges
- Uses configurable margin thickness
- Optimizes edge detection for alignment

2. **Smooth Blending Mode** 
- Creates seamless visual transitions
- Handles frame edge integration
- Preserves content integrity during blending

$END$
END SPECIFICATION