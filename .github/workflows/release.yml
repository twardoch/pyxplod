name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        uv pip install -e .[dev,test]
    
    - name: Run tests
      run: |
        uv run pytest tests/ -v --cov=src/pyxplod --cov-report=term-missing

  build-package:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        uv pip install build twine
    
    - name: Build package
      run: |
        uv run python -m build
    
    - name: Check package
      run: |
        uv run twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  build-binaries:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: pyxplod-linux-amd64
          - os: windows-latest
            artifact_name: pyxplod-windows-amd64.exe
          - os: macos-latest
            artifact_name: pyxplod-macos-amd64
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        uv pip install -e .[dev]
        uv pip install pyinstaller
    
    - name: Build binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        uv run pyinstaller --onefile --name ${{ matrix.artifact_name }} --clean src/pyxplod/__main__.py
    
    - name: Build binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        uv run pyinstaller --onefile --name pyxplod-windows-amd64 --clean src/pyxplod/__main__.py
    
    - name: Upload binary artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          dist/${{ matrix.artifact_name }}
          dist/${{ matrix.artifact_name }}.exe

  create-release:
    needs: [build-package, build-binaries]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          python-package/*
          pyxplod-*/*
        body: |
          ## Changes
          
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          
          ## Installation
          
          ### From PyPI
          ```bash
          uv pip install pyxplod
          ```
          
          ### From Binary
          Download the appropriate binary for your platform from the assets below.
          
          ## Usage
          
          ```bash
          pyxplod input_dir output_dir --method dirs --verbose
          ```
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    needs: [create-release]
    runs-on: ubuntu-latest
    environment: pypi
    
    steps:
    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip_existing: true