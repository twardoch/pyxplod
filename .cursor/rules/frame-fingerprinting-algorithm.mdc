---
description: Frame fingerprinting algorithms for video frame comparison and matching using perceptual hashing techniques
globs: **/frame_fingerprint.py,**/hash/*.py,**/video/comparison.py,**/fingerprint/*.py
alwaysApply: false
---


# frame-fingerprinting-algorithm

The frame fingerprinting system uses multiple perceptual hashing algorithms to generate compact, comparable representations of video frames.

### Core Fingerprinting Components (Importance: 95)

The FrameFingerprinter module combines four distinct perceptual hashing approaches:

1. pHash (Perceptual Hash)
- Operates in frequency domain using DCT transformation
- Robust against brightness, contrast and gamma variations
- Returns binary hash sensitive to image structure 

2. AverageHash
- Computes frame's average color values
- Returns simplified binary representation
- Fast but less precise than pHash

3. ColorMomentHash 
- Captures statistical color distribution data
- Stores color moment features as hash
- Effective for content with distinct color patterns

4. MarrHildrethHash
- Edge and shape detection based
- Captures structural frame features
- Robust against color/lighting changes

### Frame Comparison Workflow (Importance: 90)

1. Frame Standardization
- Resize input frames to 64x64 pixels
- Convert to grayscale for consistent processing
- Normalize brightness/contrast

2. Multi-Hash Generation
- Apply all four hash algorithms in parallel
- Generate color histogram
- Combine into unified fingerprint dictionary

3. Fingerprint Comparison
- Calculate normalized Hamming distances between hashes
- Compute histogram correlation
- Weight and combine similarity scores
- Returns similarity value between 0-1

### Integration Points (Importance: 85)

The fingerprinting system interfaces with:

- Temporal alignment for frame sequence matching
- Spatial alignment for template matching
- Video import/export pipeline for frame extraction
- Parallel processing system for hash generation

$END$